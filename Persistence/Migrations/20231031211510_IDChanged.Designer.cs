// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistence;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231031211510_IDChanged")]
    partial class IDChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CityCodes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int>("CountryID")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("CityCodes", "Codes");
                });

            modelBuilder.Entity("Domain.Entities.CountryCodes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("CountryCodes", "Codes");
                });

            modelBuilder.Entity("Domain.Entities.FacilityAdministrators", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SportsFacilityID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("SportsFacilityID");

                    b.HasIndex("UserID");

                    b.ToTable("FacilityAdministrators", "Sports");
                });

            modelBuilder.Entity("Domain.Entities.FieldSports", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SportCodesID")
                        .HasColumnType("integer");

                    b.Property<int>("SportID")
                        .HasColumnType("integer");

                    b.Property<int>("SportsFieldID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("SportCodesID");

                    b.HasIndex("SportsFieldID");

                    b.ToTable("FieldSports", "Sports");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("SportsFacilityID")
                        .HasColumnType("integer");

                    b.Property<int?>("SportsFieldID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("SportsFacilityID");

                    b.HasIndex("SportsFieldID");

                    b.ToTable("Image", "Sports");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("Role", "Auth");
                });

            modelBuilder.Entity("Domain.Entities.SportCodes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("SportCodes", "Codes");
                });

            modelBuilder.Entity("Domain.Entities.SportsFacility", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CityID")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(8, 6)
                        .HasColumnType("numeric(8,6)");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("SportsFacility", "Sports");
                });

            modelBuilder.Entity("Domain.Entities.SportsField", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("CityID")
                        .HasColumnType("integer");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Latitude")
                        .HasPrecision(8, 6)
                        .HasColumnType("numeric(8,6)");

                    b.Property<decimal>("Longitude")
                        .HasPrecision(9, 6)
                        .HasColumnType("numeric(9,6)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("SportsFacilityID")
                        .HasColumnType("integer");

                    b.Property<int>("SurfaceID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("SportsFacilityID");

                    b.HasIndex("SurfaceID");

                    b.ToTable("SportsField", "Sports");
                });

            modelBuilder.Entity("Domain.Entities.SurfaceCodes", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("SurfaceCodes", "Codes");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Adress")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.ToTable("User", "Auth");
                });

            modelBuilder.Entity("Domain.Entities.UserRoles", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<int?>("CreatedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("DeletedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModifiedByID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RoleID")
                        .HasColumnType("integer");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CreatedByID");

                    b.HasIndex("DeletedByID");

                    b.HasIndex("ModifiedByID");

                    b.HasIndex("RoleID");

                    b.HasIndex("UserID");

                    b.ToTable("UserRoles", "Auth");
                });

            modelBuilder.Entity("Domain.Entities.CityCodes", b =>
                {
                    b.HasOne("Domain.Entities.CountryCodes", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("CityCodesCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("CityCodesDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("CityCodesModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.Navigation("Country");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Entities.CountryCodes", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("CountryCodesCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("CountryCodesDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("CountryCodesModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Entities.FacilityAdministrators", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("FacilityAdministratorsCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("FacilityAdministratorsDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("FacilityAdministratorsModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.HasOne("Domain.Entities.SportsFacility", "SportsFacility")
                        .WithMany("Administrators")
                        .HasForeignKey("SportsFacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Facilities")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SportsFacility");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.FieldSports", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("FieldSportsCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("FieldSportsDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("FieldSportsModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.HasOne("Domain.Entities.SportCodes", "SportCodes")
                        .WithMany("Fields")
                        .HasForeignKey("SportCodesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SportsField", "SportsField")
                        .WithMany("Sports")
                        .HasForeignKey("SportsFieldID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SportCodes");

                    b.Navigation("SportsField");
                });

            modelBuilder.Entity("Domain.Entities.Image", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("ImageCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("ImageDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("ImageModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.HasOne("Domain.Entities.SportsFacility", "SportsFacility")
                        .WithMany("Images")
                        .HasForeignKey("SportsFacilityID");

                    b.HasOne("Domain.Entities.SportsField", "SportsField")
                        .WithMany("Images")
                        .HasForeignKey("SportsFieldID");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SportsFacility");

                    b.Navigation("SportsField");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("RoleCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("RoleDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("RoleModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Entities.SportCodes", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("SportCodesCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("SportCodesDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("SportCodesModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Entities.SportsFacility", b =>
                {
                    b.HasOne("Domain.Entities.CityCodes", "City")
                        .WithMany("Facilities")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("SportsFacilityCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("SportsFacilityDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("SportsFacilityModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.Navigation("City");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Entities.SportsField", b =>
                {
                    b.HasOne("Domain.Entities.CityCodes", "City")
                        .WithMany("Fields")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("SportsFieldCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("SportsFieldDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("SportsFieldModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.HasOne("Domain.Entities.SportsFacility", "SportsFacility")
                        .WithMany("SportsFields")
                        .HasForeignKey("SportsFacilityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.SurfaceCodes", "Surface")
                        .WithMany("Fields")
                        .HasForeignKey("SurfaceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("SportsFacility");

                    b.Navigation("Surface");
                });

            modelBuilder.Entity("Domain.Entities.SurfaceCodes", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("SurfaceCodesCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("SurfaceCodesDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("SurfaceCodesModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("UserCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("UserDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("UserModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("Domain.Entities.UserRoles", b =>
                {
                    b.HasOne("Domain.Entities.User", "CreatedBy")
                        .WithMany("UserRolesCreatedBy")
                        .HasForeignKey("CreatedByID");

                    b.HasOne("Domain.Entities.User", "DeletedBy")
                        .WithMany("UserRolesDeletedBy")
                        .HasForeignKey("DeletedByID");

                    b.HasOne("Domain.Entities.User", "ModifiedBy")
                        .WithMany("UserRolesModifiedBy")
                        .HasForeignKey("ModifiedByID");

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("DeletedBy");

                    b.Navigation("ModifiedBy");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CityCodes", b =>
                {
                    b.Navigation("Facilities");

                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Domain.Entities.CountryCodes", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.SportCodes", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Domain.Entities.SportsFacility", b =>
                {
                    b.Navigation("Administrators");

                    b.Navigation("Images");

                    b.Navigation("SportsFields");
                });

            modelBuilder.Entity("Domain.Entities.SportsField", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Sports");
                });

            modelBuilder.Entity("Domain.Entities.SurfaceCodes", b =>
                {
                    b.Navigation("Fields");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("CityCodesCreatedBy");

                    b.Navigation("CityCodesDeletedBy");

                    b.Navigation("CityCodesModifiedBy");

                    b.Navigation("CountryCodesCreatedBy");

                    b.Navigation("CountryCodesDeletedBy");

                    b.Navigation("CountryCodesModifiedBy");

                    b.Navigation("Facilities");

                    b.Navigation("FacilityAdministratorsCreatedBy");

                    b.Navigation("FacilityAdministratorsDeletedBy");

                    b.Navigation("FacilityAdministratorsModifiedBy");

                    b.Navigation("FieldSportsCreatedBy");

                    b.Navigation("FieldSportsDeletedBy");

                    b.Navigation("FieldSportsModifiedBy");

                    b.Navigation("ImageCreatedBy");

                    b.Navigation("ImageDeletedBy");

                    b.Navigation("ImageModifiedBy");

                    b.Navigation("RoleCreatedBy");

                    b.Navigation("RoleDeletedBy");

                    b.Navigation("RoleModifiedBy");

                    b.Navigation("Roles");

                    b.Navigation("SportCodesCreatedBy");

                    b.Navigation("SportCodesDeletedBy");

                    b.Navigation("SportCodesModifiedBy");

                    b.Navigation("SportsFacilityCreatedBy");

                    b.Navigation("SportsFacilityDeletedBy");

                    b.Navigation("SportsFacilityModifiedBy");

                    b.Navigation("SportsFieldCreatedBy");

                    b.Navigation("SportsFieldDeletedBy");

                    b.Navigation("SportsFieldModifiedBy");

                    b.Navigation("SurfaceCodesCreatedBy");

                    b.Navigation("SurfaceCodesDeletedBy");

                    b.Navigation("SurfaceCodesModifiedBy");

                    b.Navigation("UserCreatedBy");

                    b.Navigation("UserDeletedBy");

                    b.Navigation("UserModifiedBy");

                    b.Navigation("UserRolesCreatedBy");

                    b.Navigation("UserRolesDeletedBy");

                    b.Navigation("UserRolesModifiedBy");
                });
#pragma warning restore 612, 618
        }
    }
}
